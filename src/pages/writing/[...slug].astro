---
import Layout from "@/layouts/Layout.astro";
import { siteDescription } from "@/site-config";
import { getCollection } from "astro:content";
import { ArrowLeftIcon, ArrowUpIcon } from "lucide-react";

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const { title, publishedDate, tags, description = siteDescription } = entry.data;
---

<Layout layout={false} title={title} description={description}>
  <main class="relative mx-auto w-full py-20">
    <!-- TOP SECTION START -->
    <div>
      <div class="relative mx-auto w-11/12 max-w-2xl pb-8 pt-12 lg:pt-24">
        <a
          href="/writing"
          class:list={[
            "absolute -left-16 -translate-x-full rounded-md border border-indigo-200 p-2 transition-colors max-lg:hidden",
            "ring-2 ring-transparent ring-offset-2 hover:ring-indigo-700 focus:ring-indigo-700",
          ]}>
          <ArrowLeftIcon className="h-5 w-5 text-indigo-700" />
        </a>
        <div>
          <span class="text-sm">
            {new Intl.DateTimeFormat("en-GB", { dateStyle: "long" }).format(publishedDate)}</span
          >
          <h1 class="mb-2 scroll-m-20 text-4xl font-bold tracking-tight">
            {title}
          </h1>
          <ul class="mt-3 flex items-center gap-2">
            {
              tags.map((tag) => {
                return (
                  <li class="rounded-full px-2.5 py-0.5 text-sm text-indigo-900 ring-1 ring-indigo-200">
                    <span class="">{tag}</span>
                  </li>
                );
              })
            }
          </ul>
        </div>
      </div>
    </div>
    <!-- TOP SECTION END -->
    <!-- MAIN CONTENT START -->
    <div id="content" class="prose prose-lg prose-slate relative mx-auto w-11/12 max-w-2xl">
      <Content />
      <back-to-top>
        <button
          id="back-to-top"
          class="not-prose sticky bottom-12 left-full z-[99999] mt-8 h-max rounded-full bg-orange-100 p-3 opacity-0 transition-opacity hover:bg-orange-300 lg:translate-x-[200%]">
          <ArrowUpIcon className="text-orange-600" />
        </button>
      </back-to-top>
      <!-- MAIN CONTENT END -->
    </div>
    <div class="mx-auto w-11/12 max-w-2xl">
      <a
        href="/writing"
        class:list={[
          "inline-flex h-max items-center gap-1 rounded-md border border-indigo-200 p-2 text-indigo-800 transition-colors",
          "ring-2 ring-transparent ring-offset-2 hover:ring-indigo-700 focus:ring-indigo-700",
        ]}>
        <ArrowLeftIcon className="h-5 w-5" />
        <span class="text-sm">Back to writings</span>
      </a>
    </div>
  </main>
</Layout>

<script>
  import throttle from "lodash.throttle";

  class BackToTop extends HTMLElement {
    connectedCallback() {
      const backToTopButton = this.querySelector<HTMLElement>("#back-to-top");

      const toggleBackToTopVisibility = throttle(() => {
        backToTopButton!.style.opacity = window.scrollY > 500 ? "1" : "0";
      }, 400);

      backToTopButton!.addEventListener("click", this.scrollToTop);
      window.addEventListener("scroll", toggleBackToTopVisibility);
    }
    scrollToTop() {
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  }

  customElements.define("back-to-top", BackToTop);
</script>

<style is:global>
  .prose a {
    text-decoration: none;
    background-image: linear-gradient(currentColor, currentColor);
    background-position: 0% 100%;
    background-repeat: no-repeat;
    background-size: 0% 2px;
    transition: background-size 0.3s;
  }

  .prose a:is(:hover, :focus) {
    background-size: 100% 2px;
  }

  .prose a {
    @apply break-words text-orange-600;
  }

  .prose img {
    @apply m-0 mx-auto rounded-md;
  }

  .prose li {
    @apply !text-paragraph text-slate-500;
  }

  .prose :not(pre) > code {
    @apply rounded-sm bg-orange-100/70 py-0.5 !text-paragraph font-semibold text-orange-950;
  }

  .prose .image-wrapper {
    @apply my-8 rounded-md p-2 ring-1 ring-zinc-300;
  }
</style>
-->
